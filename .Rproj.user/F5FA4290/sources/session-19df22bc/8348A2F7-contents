---
title: "Retail Profitability Dashboard"
output:
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
    theme: flatly
runtime: shiny
---

```{r setup, include=FALSE}
# ============================ ONE MASTER CHUNK ============================
# Packages
pkgs <- c("tidyverse","lubridate","janitor","here","scales",
          "flexdashboard","plotly","DT","shiny","htmltools")
new <- pkgs[!pkgs %in% rownames(installed.packages())]
if (length(new)) install.packages(new, quiet = TRUE)
invisible(lapply(pkgs, library, character.only = TRUE))

# Optional CSS: widen page a bit
tags$head(tags$style(HTML("
  .main-container { max-width: 1400px !important; }
  .section.level3 { padding-top: 6px; }
")))

# ----------------------------- DATA LOAD --------------------------------
data_path <- here::here("data","Superstore.csv")  # <-- put your file here
if (!file.exists(data_path)) {
  stop("Data not found at: ", data_path,
       "\nPut the Superstore CSV there and re-run the dashboard.")
}

raw <- readr::read_csv(
  file = data_path,
  guess_max = 200000,
  locale    = readr::locale(encoding = "UTF-8")
) |>
  janitor::clean_names() |>
  dplyr::mutate(across(where(is.character),
                       ~ iconv(.x, from = "", to = "UTF-8", sub = "")))

needed <- c("order_date","ship_date","sales","profit","discount","quantity","region","category")
missing <- setdiff(needed, names(raw))
if (length(missing)) stop("Missing columns in data: ", paste(missing, collapse = ", "))

retail <- raw |>
  dplyr::mutate(
    order_date    = suppressWarnings(lubridate::mdy(order_date)),
    ship_date     = suppressWarnings(lubridate::mdy(ship_date)),
    year_month    = lubridate::floor_date(order_date, "month"),
    profit_margin = dplyr::if_else(sales > 0, profit / sales, NA_real_)
  ) |>
  dplyr::filter(!is.na(order_date), sales >= 0, quantity > 0) |>
  dplyr::mutate(across(where(is.character), trimws))

regions    <- sort(unique(retail$region))
categories <- sort(unique(retail$category))

# ----------------------------- KPIs -------------------------------------
kpi_cards <- function(df) {
  tibble::tibble(
    total_sales  = sum(df$sales,  na.rm = TRUE),
    total_profit = sum(df$profit, na.rm = TRUE),
    margin       = ifelse(sum(df$sales, na.rm=TRUE) > 0,
                          sum(df$profit, na.rm=TRUE)/sum(df$sales, na.rm=TRUE),
                          NA_real_)
  )
}
.kpi <- kpi_cards(retail)  # store for valueBoxes later

# ----------------------------- SERVER LOGIC (charts + download) ---------
# Reactive filtered data (driven by sidebar inputs defined later)
reactive_df <- reactive({
  req(input$disc_in)  # ensure inputs exist
  df <- retail
  if (!is.null(input$region_in) && input$region_in != "All")
    df <- df |> dplyr::filter(region == input$region_in)
  if (!is.null(input$cat_in) && input$cat_in != "All")
    df <- df |> dplyr::filter(category == input$cat_in)
  df |> dplyr::filter(discount <= input$disc_in)
})

# Download filtered data
observe({
  output$dl_filtered <- downloadHandler(
    filename = function() paste0("filtered_retail_", Sys.Date(), ".csv"),
    content  = function(file) readr::write_csv(reactive_df(), file)
  )
})

# Chart 1: Sales by Region
output$plot_region <- renderPlotly({
  by_region_cur <- reactive_df() |>
    dplyr::group_by(region) |>
    dplyr::summarise(sales = sum(sales, na.rm=TRUE), .groups="drop")

  p <- ggplot(by_region_cur, aes(x = reorder(region, sales), y = sales)) +
    geom_col() + coord_flip() +
    scale_y_continuous(labels = scales::dollar) +
    labs(title = "Sales by Region", x = NULL, y = "Sales")
  ggplotly(p) |> plotly::config(displayModeBar = TRUE)
})

# Chart 2: Average Profit Margin by Category
output$plot_category <- renderPlotly({
  by_cat_cur <- reactive_df() |>
    dplyr::group_by(category) |>
    dplyr::summarise(
      sales  = sum(sales,  na.rm=TRUE),
      profit = sum(profit, na.rm=TRUE),
      .groups = "drop"
    ) |>
    dplyr::mutate(avg_margin = dplyr::if_else(sales > 0, profit / sales, NA_real_))

  p <- ggplot(by_cat_cur, aes(x = reorder(category, avg_margin), y = avg_margin)) +
    geom_col() + coord_flip() +
    scale_y_continuous(labels = scales::percent) +
    labs(title = "Average Profit Margin by Category", x = NULL, y = "Avg Margin")
  ggplotly(p) |> plotly::config(displayModeBar = TRUE)
})

# Chart 3: Discount vs Profit Margin
output$plot_scatter <- renderPlotly({
  df <- reactive_df() |> dplyr::filter(!is.na(profit_margin))
  p <- ggplot(df, aes(x = discount, y = profit_margin)) +
    geom_point(alpha = 0.25) +
    geom_smooth(method = "lm", se = FALSE) +
    scale_y_continuous(labels = scales::percent) +
    labs(title = "Discount vs Profit Margin", x = "Discount", y = "Profit Margin")
  ggplotly(p) |> plotly::config(displayModeBar = TRUE)
})

# Chart 4: Monthly Sales Trend
output$plot_ts <- renderPlotly({
  tsm <- reactive_df() |>
    dplyr::group_by(year_month) |>
    dplyr::summarise(sales = sum(sales, na.rm=TRUE), .groups="drop")
  p <- ggplot(tsm, aes(x = year_month, y = sales)) +
    geom_line() +
    scale_y_continuous(labels = scales::dollar) +
    labs(title = "Monthly Sales Trend", x = NULL, y = "Sales")
  ggplotly(p) |> plotly::config(displayModeBar = TRUE)
})
# ========================== END MASTER CHUNK ============================
